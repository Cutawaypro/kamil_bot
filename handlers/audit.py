import asyncio
import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, ReplyKeyboardRemove

from data.local_storage import save_audit
from data.storage import register_user
from utils.scheduler import schedule_follow_up


router = Router()

ADMIN_CONTACT = "@KamilTGMarketer"

AUDIT_INTRO_MESSAGE = (
    "–û–∫–µ–π üëå\n"
    "–°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ–¥—É –º–∏–Ω–∏-–∞—É–¥–∏—Ç —Ç–≤–æ–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –∏–ª–∏ Ads.\n"
    "–û—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ —è –ø–æ–∫–∞–∂—É, –≥–¥–µ —Å–≥–æ—Ä–∞–µ—Ç –±—é–¥–∂–µ—Ç."
)

AUDIT_CONFIRMED_MESSAGE = (
    "‚úÖ –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∞—É–¥–∏—Ç!\n"
    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ @KamilTGMarketer."
)

AUDIT_OPTIONS = [
    "Telegram Ads",
    "–ö–∞–Ω–∞–ª –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
    "–ü–æ—Å–µ–≤—ã",
    "–í—Å—ë —Å—Ä–∞–∑—É",
]

GOAL_OPTIONS = [
    "–ü—Ä–æ–¥–∞–∂–∏",
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏",
    "–í–æ–≤–ª–µ—á–µ–Ω–∏–µ",
    "–î—Ä—É–≥–æ–µ",
]


class AuditStates(StatesGroup):
    waiting_for_audit_type = State()
    waiting_for_goal = State()
    waiting_for_link = State()


def audit_type_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in AUDIT_OPTIONS],
        resize_keyboard=True,
    )


def goal_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=option)] for option in GOAL_OPTIONS],
        resize_keyboard=True,
    )


@router.message(F.text == "üîç –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç")
async def start_audit_flow(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(AuditStates.waiting_for_audit_type)
    register_user(message.from_user.id, message.from_user.username)
    await message.answer(AUDIT_INTRO_MESSAGE)
    await message.answer(
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?",
        reply_markup=audit_type_keyboard(),
    )


@router.message(AuditStates.waiting_for_audit_type)
async def process_audit_type(message: Message, state: FSMContext) -> None:
    if message.text not in AUDIT_OPTIONS:
        await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è.", reply_markup=audit_type_keyboard())
        return

    await state.update_data(audit_type=message.text)
    await state.set_state(AuditStates.waiting_for_goal)
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å —Ä–µ–∫–ª–∞–º—ã?", reply_markup=goal_keyboard())


@router.message(AuditStates.waiting_for_goal)
async def process_goal(message: Message, state: FSMContext) -> None:
    if message.text not in GOAL_OPTIONS:
        await message.answer("–¶–µ–ª—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ ¬´–î—Ä—É–≥–æ–µ¬ª.", reply_markup=goal_keyboard())
        return

    await state.update_data(goal=message.text)
    await state.set_state(AuditStates.waiting_for_link)
    await message.answer(
        "–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ Ads-–ø—Ä–æ–µ–∫—Ç.",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(AuditStates.waiting_for_link)
async def process_link(message: Message, state: FSMContext) -> None:
    link = message.text.strip()
    if not link:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã —è –∑–∞–≥–ª—è–Ω—É–ª –≤ –ø—Ä–æ–µ–∫—Ç. –ü–æ–¥–µ–ª–∏—Å—å –µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    data = await state.get_data()
    answers = {
        "audit_type": data.get("audit_type"),
        "goal": data.get("goal"),
        "link": link,
    }

    username = message.from_user.username
    display_name = f"@{username}" if username else message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    try:
        await asyncio.to_thread(
            save_audit,
            {
                "user_id": message.from_user.id,
                "username": display_name,
                "audit_type": answers["audit_type"],
                "goal": answers["goal"],
                "link": answers["link"],
            },
        )
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to save audit request: %s", exc)

    try:
        await message.bot.send_message(
            ADMIN_CONTACT,
            "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—É–¥–∏—Ç –æ—Ç {user}\n–¶–µ–ª—å: {goal}\n–°—Å—ã–ª–∫–∞: {link}".format(
                user=display_name,
                goal=answers["goal"],
                link=answers["link"],
            ),
        )
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to notify admin about audit request: %s", exc)

    try:
        await schedule_follow_up(
            bot=message.bot,
            user_id=message.from_user.id,
            username=display_name,
        )
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to schedule follow-up for audit request: %s", exc)

    await message.answer(
        AUDIT_CONFIRMED_MESSAGE,
        reply_markup=ReplyKeyboardRemove(),
        disable_web_page_preview=True,
    )
    await state.clear()
