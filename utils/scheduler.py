import logging
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from data.config import get_config


scheduler = AsyncIOScheduler()


def start_scheduler(bot: Bot) -> None:
    """Ensure that the background scheduler is running."""
    if not scheduler.running:
        scheduler.start()


async def schedule_follow_up(bot: Bot, user_id: int, username: Optional[str]) -> None:
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –∞—É–¥–∏—Ç–∞.
    """
    start_scheduler(bot)

    config = get_config()
    delay_hours = max(config.follow_up_delay_hours, 1)
    run_time = datetime.now() + timedelta(hours=delay_hours)

    try:
        scheduler.add_job(
            send_follow_up,
            trigger="date",
            run_date=run_time,
            args=[bot, user_id, username],
            misfire_grace_time=3600,
        )
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to schedule follow-up message: %s", exc)


async def send_follow_up(bot: Bot, user_id: int, username: Optional[str]) -> None:
    text = (
        f"–•–µ–π üëã {username or ''}\n"
        "–¢—ã —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É?\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–æ–º–Ω—é, –≤–æ—Ç —Å—Å—ã–ª–∫–∞ üìé\n\n"
        "–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é?"
    )
    try:
        await bot.send_message(user_id, text)
    except Exception as exc:  # noqa: BLE001
        logging.exception("Failed to send follow-up message: %s", exc)
